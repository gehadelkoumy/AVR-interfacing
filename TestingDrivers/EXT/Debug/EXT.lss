
EXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b40  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000aec  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000515  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_1>
   8:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_2>
   c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 78 05 	call	0xaf0	; 0xaf0 <main>
  64:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "DIO_Interface.h"

                                      /*Functions Implementation*/
//____________________________________________Pin direction________________________________________________				   
void DIO_voidSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	        /*Output Mode*/
	if(Copy_u8PinDirection == 1)     
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_voidSetPinDirection+0x22>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_u8PortID)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3f 83       	std	Y+7, r19	; 0x07
  96:	2e 83       	std	Y+6, r18	; 0x06
  98:	8e 81       	ldd	r24, Y+6	; 0x06
  9a:	9f 81       	ldd	r25, Y+7	; 0x07
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	49 f1       	breq	.+82     	; 0xf4 <DIO_voidSetPinDirection+0x88>
  a2:	2e 81       	ldd	r18, Y+6	; 0x06
  a4:	3f 81       	ldd	r19, Y+7	; 0x07
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	31 05       	cpc	r19, r1
  aa:	2c f4       	brge	.+10     	; 0xb6 <DIO_voidSetPinDirection+0x4a>
  ac:	8e 81       	ldd	r24, Y+6	; 0x06
  ae:	9f 81       	ldd	r25, Y+7	; 0x07
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	61 f0       	breq	.+24     	; 0xcc <DIO_voidSetPinDirection+0x60>
  b4:	d2 c0       	rjmp	.+420    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
  b6:	2e 81       	ldd	r18, Y+6	; 0x06
  b8:	3f 81       	ldd	r19, Y+7	; 0x07
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	71 f1       	breq	.+92     	; 0x11c <DIO_voidSetPinDirection+0xb0>
  c0:	8e 81       	ldd	r24, Y+6	; 0x06
  c2:	9f 81       	ldd	r25, Y+7	; 0x07
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	e9 f1       	breq	.+122    	; 0x144 <DIO_voidSetPinDirection+0xd8>
  ca:	c7 c0       	rjmp	.+398    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		{
			case portA :
			SetBit(DDRA_REG , Copy_u8PinID);
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x7a>
  ee:	84 2b       	or	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	b3 c0       	rjmp	.+358    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portB :
			SetBit(DDRB_REG , Copy_u8PinID);
  f4:	a7 e3       	ldi	r26, 0x37	; 55
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_voidSetPinDirection+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_voidSetPinDirection+0xa2>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
 11a:	9f c0       	rjmp	.+318    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portC :
			SetBit(DDRC_REG , Copy_u8PinID);
 11c:	a4 e3       	ldi	r26, 0x34	; 52
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e4 e3       	ldi	r30, 0x34	; 52
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_voidSetPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_voidSetPinDirection+0xca>
 13e:	84 2b       	or	r24, r20
 140:	8c 93       	st	X, r24
 142:	8b c0       	rjmp	.+278    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portD :
			SetBit(DDRD_REG , Copy_u8PinID);
 144:	a1 e3       	ldi	r26, 0x31	; 49
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e1 e3       	ldi	r30, 0x31	; 49
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	48 2f       	mov	r20, r24
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinDirection+0xf6>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinDirection+0xf2>
 166:	84 2b       	or	r24, r20
 168:	8c 93       	st	X, r24
 16a:	77 c0       	rjmp	.+238    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
		}
	}
	        /*Input Mode*/
	else if (Copy_u8PinDirection == 0)
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	88 23       	and	r24, r24
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_voidSetPinDirection+0x108>
 172:	73 c0       	rjmp	.+230    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8PortID)
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	3d 83       	std	Y+5, r19	; 0x05
 17c:	2c 83       	std	Y+4, r18	; 0x04
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	9d 81       	ldd	r25, Y+5	; 0x05
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	59 f1       	breq	.+86     	; 0x1de <DIO_voidSetPinDirection+0x172>
 188:	2c 81       	ldd	r18, Y+4	; 0x04
 18a:	3d 81       	ldd	r19, Y+5	; 0x05
 18c:	22 30       	cpi	r18, 0x02	; 2
 18e:	31 05       	cpc	r19, r1
 190:	2c f4       	brge	.+10     	; 0x19c <DIO_voidSetPinDirection+0x130>
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	9d 81       	ldd	r25, Y+5	; 0x05
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_voidSetPinDirection+0x148>
 19a:	5f c0       	rjmp	.+190    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
 19c:	2c 81       	ldd	r18, Y+4	; 0x04
 19e:	3d 81       	ldd	r19, Y+5	; 0x05
 1a0:	22 30       	cpi	r18, 0x02	; 2
 1a2:	31 05       	cpc	r19, r1
 1a4:	89 f1       	breq	.+98     	; 0x208 <DIO_voidSetPinDirection+0x19c>
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	9d 81       	ldd	r25, Y+5	; 0x05
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <DIO_voidSetPinDirection+0x146>
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <DIO_voidSetPinDirection+0x1c6>
 1b2:	53 c0       	rjmp	.+166    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		{
			case portA :
			ClrBit(DDRA_REG , Copy_u8PinID);
 1b4:	aa e3       	ldi	r26, 0x3A	; 58
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	ea e3       	ldi	r30, 0x3A	; 58
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	48 2f       	mov	r20, r24
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_voidSetPinDirection+0x166>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_voidSetPinDirection+0x162>
 1d6:	80 95       	com	r24
 1d8:	84 23       	and	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	3e c0       	rjmp	.+124    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portB :
			ClrBit(DDRB_REG , Copy_u8PinID);
 1de:	a7 e3       	ldi	r26, 0x37	; 55
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e7 e3       	ldi	r30, 0x37	; 55
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_voidSetPinDirection+0x190>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_voidSetPinDirection+0x18c>
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	8c 93       	st	X, r24
 206:	29 c0       	rjmp	.+82     	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portC :
			ClrBit(DDRC_REG , Copy_u8PinID);
 208:	a4 e3       	ldi	r26, 0x34	; 52
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e4 e3       	ldi	r30, 0x34	; 52
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_voidSetPinDirection+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_voidSetPinDirection+0x1b6>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
 230:	14 c0       	rjmp	.+40     	; 0x25a <DIO_voidSetPinDirection+0x1ee>
			break;
			
			case portD :
			ClrBit(DDRD_REG , Copy_u8PinID);
 232:	a1 e3       	ldi	r26, 0x31	; 49
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e1 e3       	ldi	r30, 0x31	; 49
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_voidSetPinDirection+0x1e4>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_voidSetPinDirection+0x1e0>
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	8c 93       	st	X, r24
			break;
		}
	}
}
 25a:	27 96       	adiw	r28, 0x07	; 7
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <DIO_voidSetPinValue>:

//______________________________________Pin value________________________________________
// After determining pin direction , we need to determine if value high or low
void DIO_voidSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	27 97       	sbiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	6a 83       	std	Y+2, r22	; 0x02
 284:	4b 83       	std	Y+3, r20	; 0x03
	        /*Output is high*/
	if(Copy_u8PinValue == 1)     
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	09 f0       	breq	.+2      	; 0x28e <DIO_voidSetPinValue+0x22>
 28c:	6f c0       	rjmp	.+222    	; 0x36c <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8PortID)
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	3f 83       	std	Y+7, r19	; 0x07
 296:	2e 83       	std	Y+6, r18	; 0x06
 298:	8e 81       	ldd	r24, Y+6	; 0x06
 29a:	9f 81       	ldd	r25, Y+7	; 0x07
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	91 05       	cpc	r25, r1
 2a0:	49 f1       	breq	.+82     	; 0x2f4 <DIO_voidSetPinValue+0x88>
 2a2:	2e 81       	ldd	r18, Y+6	; 0x06
 2a4:	3f 81       	ldd	r19, Y+7	; 0x07
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	31 05       	cpc	r19, r1
 2aa:	2c f4       	brge	.+10     	; 0x2b6 <DIO_voidSetPinValue+0x4a>
 2ac:	8e 81       	ldd	r24, Y+6	; 0x06
 2ae:	9f 81       	ldd	r25, Y+7	; 0x07
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	61 f0       	breq	.+24     	; 0x2cc <DIO_voidSetPinValue+0x60>
 2b4:	d2 c0       	rjmp	.+420    	; 0x45a <DIO_voidSetPinValue+0x1ee>
 2b6:	2e 81       	ldd	r18, Y+6	; 0x06
 2b8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ba:	22 30       	cpi	r18, 0x02	; 2
 2bc:	31 05       	cpc	r19, r1
 2be:	71 f1       	breq	.+92     	; 0x31c <DIO_voidSetPinValue+0xb0>
 2c0:	8e 81       	ldd	r24, Y+6	; 0x06
 2c2:	9f 81       	ldd	r25, Y+7	; 0x07
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	91 05       	cpc	r25, r1
 2c8:	e9 f1       	breq	.+122    	; 0x344 <DIO_voidSetPinValue+0xd8>
 2ca:	c7 c0       	rjmp	.+398    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		{
			case portA :
			SetBit(PORTA_REG , Copy_u8PinID);
 2cc:	ab e3       	ldi	r26, 0x3B	; 59
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	eb e3       	ldi	r30, 0x3B	; 59
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_voidSetPinValue+0x7e>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_voidSetPinValue+0x7a>
 2ee:	84 2b       	or	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	b3 c0       	rjmp	.+358    	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portB :
			SetBit(PORTB_REG , Copy_u8PinID);
 2f4:	a8 e3       	ldi	r26, 0x38	; 56
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	e8 e3       	ldi	r30, 0x38	; 56
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	48 2f       	mov	r20, r24
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_voidSetPinValue+0xa6>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_voidSetPinValue+0xa2>
 316:	84 2b       	or	r24, r20
 318:	8c 93       	st	X, r24
 31a:	9f c0       	rjmp	.+318    	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portC :
			SetBit(PORTC_REG , Copy_u8PinID);
 31c:	a5 e3       	ldi	r26, 0x35	; 53
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e5 e3       	ldi	r30, 0x35	; 53
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	48 2f       	mov	r20, r24
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 2e       	mov	r0, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_voidSetPinValue+0xce>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_voidSetPinValue+0xca>
 33e:	84 2b       	or	r24, r20
 340:	8c 93       	st	X, r24
 342:	8b c0       	rjmp	.+278    	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portD :
			SetBit(PORTD_REG , Copy_u8PinID);
 344:	a2 e3       	ldi	r26, 0x32	; 50
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e2 e3       	ldi	r30, 0x32	; 50
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_voidSetPinValue+0xf6>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_voidSetPinValue+0xf2>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	77 c0       	rjmp	.+238    	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
		}
	}
	        /*Output is low*/
	else if (Copy_u8PinValue == 0)
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	88 23       	and	r24, r24
 370:	09 f0       	breq	.+2      	; 0x374 <DIO_voidSetPinValue+0x108>
 372:	73 c0       	rjmp	.+230    	; 0x45a <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8PortID)
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	3d 83       	std	Y+5, r19	; 0x05
 37c:	2c 83       	std	Y+4, r18	; 0x04
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	9d 81       	ldd	r25, Y+5	; 0x05
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 05       	cpc	r25, r1
 386:	59 f1       	breq	.+86     	; 0x3de <DIO_voidSetPinValue+0x172>
 388:	2c 81       	ldd	r18, Y+4	; 0x04
 38a:	3d 81       	ldd	r19, Y+5	; 0x05
 38c:	22 30       	cpi	r18, 0x02	; 2
 38e:	31 05       	cpc	r19, r1
 390:	2c f4       	brge	.+10     	; 0x39c <DIO_voidSetPinValue+0x130>
 392:	8c 81       	ldd	r24, Y+4	; 0x04
 394:	9d 81       	ldd	r25, Y+5	; 0x05
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	69 f0       	breq	.+26     	; 0x3b4 <DIO_voidSetPinValue+0x148>
 39a:	5f c0       	rjmp	.+190    	; 0x45a <DIO_voidSetPinValue+0x1ee>
 39c:	2c 81       	ldd	r18, Y+4	; 0x04
 39e:	3d 81       	ldd	r19, Y+5	; 0x05
 3a0:	22 30       	cpi	r18, 0x02	; 2
 3a2:	31 05       	cpc	r19, r1
 3a4:	89 f1       	breq	.+98     	; 0x408 <DIO_voidSetPinValue+0x19c>
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	9d 81       	ldd	r25, Y+5	; 0x05
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	91 05       	cpc	r25, r1
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <DIO_voidSetPinValue+0x146>
 3b0:	40 c0       	rjmp	.+128    	; 0x432 <DIO_voidSetPinValue+0x1c6>
 3b2:	53 c0       	rjmp	.+166    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		{
			case portA :
			ClrBit(PORTA_REG , Copy_u8PinID);
 3b4:	ab e3       	ldi	r26, 0x3B	; 59
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	eb e3       	ldi	r30, 0x3B	; 59
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_voidSetPinValue+0x166>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_voidSetPinValue+0x162>
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	3e c0       	rjmp	.+124    	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portB :
			ClrBit(PORTB_REG , Copy_u8PinID);
 3de:	a8 e3       	ldi	r26, 0x38	; 56
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e8 e3       	ldi	r30, 0x38	; 56
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_voidSetPinValue+0x190>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_voidSetPinValue+0x18c>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
 406:	29 c0       	rjmp	.+82     	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portC :
			ClrBit(PORTC_REG , Copy_u8PinID);
 408:	a5 e3       	ldi	r26, 0x35	; 53
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e5 e3       	ldi	r30, 0x35	; 53
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_voidSetPinValue+0x1ba>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_voidSetPinValue+0x1b6>
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	8c 93       	st	X, r24
 430:	14 c0       	rjmp	.+40     	; 0x45a <DIO_voidSetPinValue+0x1ee>
			break;
			
			case portD :
			ClrBit(PORTD_REG , Copy_u8PinID);
 432:	a2 e3       	ldi	r26, 0x32	; 50
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e2 e3       	ldi	r30, 0x32	; 50
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_voidSetPinValue+0x1e4>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_voidSetPinValue+0x1e0>
 454:	80 95       	com	r24
 456:	84 23       	and	r24, r20
 458:	8c 93       	st	X, r24
			break;
		}
	}
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <DIO_voidSetPortDirection>:

//_____________________________________________Port direction__________________________________
void DIO_voidSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8PortDirection)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_voidSetPortDirection+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_voidSetPortDirection+0x8>
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	89 83       	std	Y+1, r24	; 0x01
 47a:	6a 83       	std	Y+2, r22	; 0x02
	      /*Input or Output Mode*/
	switch(Copy_u8PortID)
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	3c 83       	std	Y+4, r19	; 0x04
 484:	2b 83       	std	Y+3, r18	; 0x03
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	9c 81       	ldd	r25, Y+4	; 0x04
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	91 05       	cpc	r25, r1
 48e:	d1 f0       	breq	.+52     	; 0x4c4 <DIO_voidSetPortDirection+0x58>
 490:	2b 81       	ldd	r18, Y+3	; 0x03
 492:	3c 81       	ldd	r19, Y+4	; 0x04
 494:	22 30       	cpi	r18, 0x02	; 2
 496:	31 05       	cpc	r19, r1
 498:	2c f4       	brge	.+10     	; 0x4a4 <DIO_voidSetPortDirection+0x38>
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	9c 81       	ldd	r25, Y+4	; 0x04
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	61 f0       	breq	.+24     	; 0x4ba <DIO_voidSetPortDirection+0x4e>
 4a2:	1e c0       	rjmp	.+60     	; 0x4e0 <DIO_voidSetPortDirection+0x74>
 4a4:	2b 81       	ldd	r18, Y+3	; 0x03
 4a6:	3c 81       	ldd	r19, Y+4	; 0x04
 4a8:	22 30       	cpi	r18, 0x02	; 2
 4aa:	31 05       	cpc	r19, r1
 4ac:	81 f0       	breq	.+32     	; 0x4ce <DIO_voidSetPortDirection+0x62>
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	9c 81       	ldd	r25, Y+4	; 0x04
 4b2:	83 30       	cpi	r24, 0x03	; 3
 4b4:	91 05       	cpc	r25, r1
 4b6:	81 f0       	breq	.+32     	; 0x4d8 <DIO_voidSetPortDirection+0x6c>
 4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <DIO_voidSetPortDirection+0x74>
	{
		case portA :
		DDRA_REG = Copy_u8PortDirection;
 4ba:	ea e3       	ldi	r30, 0x3A	; 58
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	80 83       	st	Z, r24
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portB :
		DDRB_REG = Copy_u8PortDirection;
 4c4:	e7 e3       	ldi	r30, 0x37	; 55
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	80 83       	st	Z, r24
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portC :
		DDRC_REG = Copy_u8PortDirection;
 4ce:	e4 e3       	ldi	r30, 0x34	; 52
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	80 83       	st	Z, r24
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <DIO_voidSetPortDirection+0x74>
		break;
		
		case portD :
		DDRD_REG = Copy_u8PortDirection;
 4d8:	e1 e3       	ldi	r30, 0x31	; 49
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	80 83       	st	Z, r24
		break;
	}
}
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	cf 91       	pop	r28
 4ea:	df 91       	pop	r29
 4ec:	08 95       	ret

000004ee <DIO_voidSetPortValue>:

//_______________________________________________Port Value_________________________________________
void DIO_voidSetPortValue(u8 Copy_u8PortID , u8 Copy_u8PortValue)
{
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <DIO_voidSetPortValue+0x6>
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <DIO_voidSetPortValue+0x8>
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	89 83       	std	Y+1, r24	; 0x01
 4fc:	6a 83       	std	Y+2, r22	; 0x02
	      /*Output port high or low*/
	switch(Copy_u8PortID)
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	3c 83       	std	Y+4, r19	; 0x04
 506:	2b 83       	std	Y+3, r18	; 0x03
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	9c 81       	ldd	r25, Y+4	; 0x04
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	91 05       	cpc	r25, r1
 510:	d1 f0       	breq	.+52     	; 0x546 <DIO_voidSetPortValue+0x58>
 512:	2b 81       	ldd	r18, Y+3	; 0x03
 514:	3c 81       	ldd	r19, Y+4	; 0x04
 516:	22 30       	cpi	r18, 0x02	; 2
 518:	31 05       	cpc	r19, r1
 51a:	2c f4       	brge	.+10     	; 0x526 <DIO_voidSetPortValue+0x38>
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	9c 81       	ldd	r25, Y+4	; 0x04
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	61 f0       	breq	.+24     	; 0x53c <DIO_voidSetPortValue+0x4e>
 524:	1e c0       	rjmp	.+60     	; 0x562 <DIO_voidSetPortValue+0x74>
 526:	2b 81       	ldd	r18, Y+3	; 0x03
 528:	3c 81       	ldd	r19, Y+4	; 0x04
 52a:	22 30       	cpi	r18, 0x02	; 2
 52c:	31 05       	cpc	r19, r1
 52e:	81 f0       	breq	.+32     	; 0x550 <DIO_voidSetPortValue+0x62>
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	91 05       	cpc	r25, r1
 538:	81 f0       	breq	.+32     	; 0x55a <DIO_voidSetPortValue+0x6c>
 53a:	13 c0       	rjmp	.+38     	; 0x562 <DIO_voidSetPortValue+0x74>
	{
		case portA :
		PORTA_REG = Copy_u8PortValue;
 53c:	eb e3       	ldi	r30, 0x3B	; 59
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	80 83       	st	Z, r24
 544:	0e c0       	rjmp	.+28     	; 0x562 <DIO_voidSetPortValue+0x74>
		break;
		
		case portB :
		PORTB_REG = Copy_u8PortValue;
 546:	e8 e3       	ldi	r30, 0x38	; 56
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	80 83       	st	Z, r24
 54e:	09 c0       	rjmp	.+18     	; 0x562 <DIO_voidSetPortValue+0x74>
		break;
		
		case portC :
		PORTC_REG = Copy_u8PortValue;
 550:	e5 e3       	ldi	r30, 0x35	; 53
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	80 83       	st	Z, r24
 558:	04 c0       	rjmp	.+8      	; 0x562 <DIO_voidSetPortValue+0x74>
		break;
		
		case portD :
		PORTD_REG = Copy_u8PortValue;
 55a:	e2 e3       	ldi	r30, 0x32	; 50
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	80 83       	st	Z, r24
		break;
	}
}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <DIO_voidTogglePinValue>:

//________________________________________________Toggle Pin_____________________________________
void DIO_voidTogglePinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	00 d0       	rcall	.+0      	; 0x576 <DIO_voidTogglePinValue+0x6>
 576:	00 d0       	rcall	.+0      	; 0x578 <DIO_voidTogglePinValue+0x8>
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	89 83       	std	Y+1, r24	; 0x01
 57e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	3c 83       	std	Y+4, r19	; 0x04
 588:	2b 83       	std	Y+3, r18	; 0x03
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	9c 81       	ldd	r25, Y+4	; 0x04
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	91 05       	cpc	r25, r1
 592:	49 f1       	breq	.+82     	; 0x5e6 <DIO_voidTogglePinValue+0x76>
 594:	2b 81       	ldd	r18, Y+3	; 0x03
 596:	3c 81       	ldd	r19, Y+4	; 0x04
 598:	22 30       	cpi	r18, 0x02	; 2
 59a:	31 05       	cpc	r19, r1
 59c:	2c f4       	brge	.+10     	; 0x5a8 <DIO_voidTogglePinValue+0x38>
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	9c 81       	ldd	r25, Y+4	; 0x04
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	61 f0       	breq	.+24     	; 0x5be <DIO_voidTogglePinValue+0x4e>
 5a6:	5a c0       	rjmp	.+180    	; 0x65c <DIO_voidTogglePinValue+0xec>
 5a8:	2b 81       	ldd	r18, Y+3	; 0x03
 5aa:	3c 81       	ldd	r19, Y+4	; 0x04
 5ac:	22 30       	cpi	r18, 0x02	; 2
 5ae:	31 05       	cpc	r19, r1
 5b0:	71 f1       	breq	.+92     	; 0x60e <DIO_voidTogglePinValue+0x9e>
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	9c 81       	ldd	r25, Y+4	; 0x04
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	91 05       	cpc	r25, r1
 5ba:	e9 f1       	breq	.+122    	; 0x636 <DIO_voidTogglePinValue+0xc6>
 5bc:	4f c0       	rjmp	.+158    	; 0x65c <DIO_voidTogglePinValue+0xec>
	{
		case portA :
		ToggleBit(PORTA_REG , Copy_u8PinID);
 5be:	ab e3       	ldi	r26, 0x3B	; 59
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	eb e3       	ldi	r30, 0x3B	; 59
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	48 2f       	mov	r20, r24
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 2e       	mov	r0, r18
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_voidTogglePinValue+0x6c>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_voidTogglePinValue+0x68>
 5e0:	84 27       	eor	r24, r20
 5e2:	8c 93       	st	X, r24
 5e4:	3b c0       	rjmp	.+118    	; 0x65c <DIO_voidTogglePinValue+0xec>
		break;
		
		case portB :
		ToggleBit(PORTB_REG , Copy_u8PinID);
 5e6:	a8 e3       	ldi	r26, 0x38	; 56
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e8 e3       	ldi	r30, 0x38	; 56
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	48 2f       	mov	r20, r24
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 2e       	mov	r0, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_voidTogglePinValue+0x94>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_voidTogglePinValue+0x90>
 608:	84 27       	eor	r24, r20
 60a:	8c 93       	st	X, r24
 60c:	27 c0       	rjmp	.+78     	; 0x65c <DIO_voidTogglePinValue+0xec>
		break;
		
		case portC :
		ToggleBit(PORTC_REG , Copy_u8PinID);
 60e:	a5 e3       	ldi	r26, 0x35	; 53
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e5 e3       	ldi	r30, 0x35	; 53
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8a 81       	ldd	r24, Y+2	; 0x02
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_voidTogglePinValue+0xbc>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_voidTogglePinValue+0xb8>
 630:	84 27       	eor	r24, r20
 632:	8c 93       	st	X, r24
 634:	13 c0       	rjmp	.+38     	; 0x65c <DIO_voidTogglePinValue+0xec>
		break;
		
		case portD :
		ToggleBit(PORTD_REG , Copy_u8PinID);
 636:	a2 e3       	ldi	r26, 0x32	; 50
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e2 e3       	ldi	r30, 0x32	; 50
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	48 2f       	mov	r20, r24
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 2e       	mov	r0, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_voidTogglePinValue+0xe4>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_voidTogglePinValue+0xe0>
 658:	84 27       	eor	r24, r20
 65a:	8c 93       	st	X, r24
		break;
	}
}
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <DIO_u8GetPinValue>:

//_______________________________________________Get pin________________________________________
u8 DIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	00 d0       	rcall	.+0      	; 0x670 <DIO_u8GetPinValue+0x6>
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_u8GetPinValue+0x8>
 672:	0f 92       	push	r0
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	8a 83       	std	Y+2, r24	; 0x02
 67a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Copy_u8PinValue;
	switch(Copy_u8PortID)
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	3d 83       	std	Y+5, r19	; 0x05
 684:	2c 83       	std	Y+4, r18	; 0x04
 686:	4c 81       	ldd	r20, Y+4	; 0x04
 688:	5d 81       	ldd	r21, Y+5	; 0x05
 68a:	41 30       	cpi	r20, 0x01	; 1
 68c:	51 05       	cpc	r21, r1
 68e:	41 f1       	breq	.+80     	; 0x6e0 <DIO_u8GetPinValue+0x76>
 690:	8c 81       	ldd	r24, Y+4	; 0x04
 692:	9d 81       	ldd	r25, Y+5	; 0x05
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	91 05       	cpc	r25, r1
 698:	34 f4       	brge	.+12     	; 0x6a6 <DIO_u8GetPinValue+0x3c>
 69a:	2c 81       	ldd	r18, Y+4	; 0x04
 69c:	3d 81       	ldd	r19, Y+5	; 0x05
 69e:	21 15       	cp	r18, r1
 6a0:	31 05       	cpc	r19, r1
 6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_u8GetPinValue+0x52>
 6a4:	52 c0       	rjmp	.+164    	; 0x74a <DIO_u8GetPinValue+0xe0>
 6a6:	4c 81       	ldd	r20, Y+4	; 0x04
 6a8:	5d 81       	ldd	r21, Y+5	; 0x05
 6aa:	42 30       	cpi	r20, 0x02	; 2
 6ac:	51 05       	cpc	r21, r1
 6ae:	51 f1       	breq	.+84     	; 0x704 <DIO_u8GetPinValue+0x9a>
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	9d 81       	ldd	r25, Y+5	; 0x05
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	b9 f1       	breq	.+110    	; 0x728 <DIO_u8GetPinValue+0xbe>
 6ba:	47 c0       	rjmp	.+142    	; 0x74a <DIO_u8GetPinValue+0xe0>
	{
		case portA :
		Copy_u8PinValue = GetBit(PINA_REG , Copy_u8PinID);
 6bc:	e9 e3       	ldi	r30, 0x39	; 57
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	28 2f       	mov	r18, r24
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	88 2f       	mov	r24, r24
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a9 01       	movw	r20, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_u8GetPinValue+0x6a>
 6d0:	55 95       	asr	r21
 6d2:	47 95       	ror	r20
 6d4:	8a 95       	dec	r24
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_u8GetPinValue+0x66>
 6d8:	ca 01       	movw	r24, r20
 6da:	81 70       	andi	r24, 0x01	; 1
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	35 c0       	rjmp	.+106    	; 0x74a <DIO_u8GetPinValue+0xe0>
		break;
		
		case portB :
		Copy_u8PinValue = GetBit(PINB_REG , Copy_u8PinID);
 6e0:	e6 e3       	ldi	r30, 0x36	; 54
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	88 2f       	mov	r24, r24
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	a9 01       	movw	r20, r18
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_u8GetPinValue+0x8e>
 6f4:	55 95       	asr	r21
 6f6:	47 95       	ror	r20
 6f8:	8a 95       	dec	r24
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_u8GetPinValue+0x8a>
 6fc:	ca 01       	movw	r24, r20
 6fe:	81 70       	andi	r24, 0x01	; 1
 700:	89 83       	std	Y+1, r24	; 0x01
 702:	23 c0       	rjmp	.+70     	; 0x74a <DIO_u8GetPinValue+0xe0>
		break;
		
		case portC :
		Copy_u8PinValue = GetBit(PINC_REG , Copy_u8PinID);
 704:	e3 e3       	ldi	r30, 0x33	; 51
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	28 2f       	mov	r18, r24
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	88 2f       	mov	r24, r24
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	a9 01       	movw	r20, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_u8GetPinValue+0xb2>
 718:	55 95       	asr	r21
 71a:	47 95       	ror	r20
 71c:	8a 95       	dec	r24
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_u8GetPinValue+0xae>
 720:	ca 01       	movw	r24, r20
 722:	81 70       	andi	r24, 0x01	; 1
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	11 c0       	rjmp	.+34     	; 0x74a <DIO_u8GetPinValue+0xe0>
		break;
		
		case portD :
		Copy_u8PinValue = GetBit(PIND_REG , Copy_u8PinID);
 728:	e0 e3       	ldi	r30, 0x30	; 48
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	a9 01       	movw	r20, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_u8GetPinValue+0xd6>
 73c:	55 95       	asr	r21
 73e:	47 95       	ror	r20
 740:	8a 95       	dec	r24
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_u8GetPinValue+0xd2>
 744:	ca 01       	movw	r24, r20
 746:	81 70       	andi	r24, 0x01	; 1
 748:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Copy_u8PinValue;
 74a:	89 81       	ldd	r24, Y+1	; 0x01
}
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	cf 91       	pop	r28
 758:	df 91       	pop	r29
 75a:	08 95       	ret

0000075c <EXT_voidInitialize>:
#include "EXT_Config.h"
#include "EXT_Interface.h"


void EXT_voidInitialize(u8 Copy_u8EXT_ID , u8 Copy_u8SenseMode)
{
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	28 97       	sbiw	r28, 0x08	; 8
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	6a 83       	std	Y+2, r22	; 0x02
	EXT_voidGIE_Enable();       //Enable Global Interrupt
 774:	0e 94 5c 05 	call	0xab8	; 0xab8 <EXT_voidGIE_Enable>
           /*EXT0*/
	if(Copy_u8EXT_ID == EXT0)
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	88 23       	and	r24, r24
 77c:	09 f0       	breq	.+2      	; 0x780 <EXT_voidInitialize+0x24>
 77e:	6c c0       	rjmp	.+216    	; 0x858 <EXT_voidInitialize+0xfc>
	{
		DIO_voidSetPinDirection(portD , pin2 , pin_input);
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	62 e0       	ldi	r22, 0x02	; 2
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(portD , pin2 , pin_high);
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	62 e0       	ldi	r22, 0x02	; 2
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPinValue>

        /*PIF sense control*/
		switch(Copy_u8SenseMode)
 794:	8a 81       	ldd	r24, Y+2	; 0x02
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	38 87       	std	Y+8, r19	; 0x08
 79c:	2f 83       	std	Y+7, r18	; 0x07
 79e:	8f 81       	ldd	r24, Y+7	; 0x07
 7a0:	98 85       	ldd	r25, Y+8	; 0x08
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	91 05       	cpc	r25, r1
 7a6:	21 f1       	breq	.+72     	; 0x7f0 <EXT_voidInitialize+0x94>
 7a8:	2f 81       	ldd	r18, Y+7	; 0x07
 7aa:	38 85       	ldd	r19, Y+8	; 0x08
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	31 05       	cpc	r19, r1
 7b0:	2c f4       	brge	.+10     	; 0x7bc <EXT_voidInitialize+0x60>
 7b2:	8f 81       	ldd	r24, Y+7	; 0x07
 7b4:	98 85       	ldd	r25, Y+8	; 0x08
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <EXT_voidInitialize+0x76>
 7ba:	46 c0       	rjmp	.+140    	; 0x848 <EXT_voidInitialize+0xec>
 7bc:	2f 81       	ldd	r18, Y+7	; 0x07
 7be:	38 85       	ldd	r19, Y+8	; 0x08
 7c0:	22 30       	cpi	r18, 0x02	; 2
 7c2:	31 05       	cpc	r19, r1
 7c4:	21 f1       	breq	.+72     	; 0x80e <EXT_voidInitialize+0xb2>
 7c6:	8f 81       	ldd	r24, Y+7	; 0x07
 7c8:	98 85       	ldd	r25, Y+8	; 0x08
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	91 05       	cpc	r25, r1
 7ce:	71 f1       	breq	.+92     	; 0x82c <EXT_voidInitialize+0xd0>
 7d0:	3b c0       	rjmp	.+118    	; 0x848 <EXT_voidInitialize+0xec>
		{
		case LowLevel :
			ClrBit(MCUCR , pin0);
 7d2:	a5 e5       	ldi	r26, 0x55	; 85
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	e5 e5       	ldi	r30, 0x55	; 85
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	8c 93       	st	X, r24
			ClrBit(MCUCR , pin1);
 7e0:	a5 e5       	ldi	r26, 0x55	; 85
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e5 e5       	ldi	r30, 0x55	; 85
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	8d 7f       	andi	r24, 0xFD	; 253
 7ec:	8c 93       	st	X, r24
 7ee:	2c c0       	rjmp	.+88     	; 0x848 <EXT_voidInitialize+0xec>
			break;

		case RisingEdge :
			SetBit(MCUCR , pin0);
 7f0:	a5 e5       	ldi	r26, 0x55	; 85
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	e5 e5       	ldi	r30, 0x55	; 85
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	8c 93       	st	X, r24
			SetBit(MCUCR , pin1);
 7fe:	a5 e5       	ldi	r26, 0x55	; 85
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	e5 e5       	ldi	r30, 0x55	; 85
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	82 60       	ori	r24, 0x02	; 2
 80a:	8c 93       	st	X, r24
 80c:	1d c0       	rjmp	.+58     	; 0x848 <EXT_voidInitialize+0xec>
			break;

		case FallingEdge :
			ClrBit(MCUCR , pin0);
 80e:	a5 e5       	ldi	r26, 0x55	; 85
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	e5 e5       	ldi	r30, 0x55	; 85
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	8e 7f       	andi	r24, 0xFE	; 254
 81a:	8c 93       	st	X, r24
			SetBit(MCUCR , pin1);
 81c:	a5 e5       	ldi	r26, 0x55	; 85
 81e:	b0 e0       	ldi	r27, 0x00	; 0
 820:	e5 e5       	ldi	r30, 0x55	; 85
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	82 60       	ori	r24, 0x02	; 2
 828:	8c 93       	st	X, r24
 82a:	0e c0       	rjmp	.+28     	; 0x848 <EXT_voidInitialize+0xec>
			break;

		case AnyLogicalChange :
			SetBit(MCUCR , pin0);
 82c:	a5 e5       	ldi	r26, 0x55	; 85
 82e:	b0 e0       	ldi	r27, 0x00	; 0
 830:	e5 e5       	ldi	r30, 0x55	; 85
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	81 60       	ori	r24, 0x01	; 1
 838:	8c 93       	st	X, r24
			ClrBit(MCUCR , pin1);
 83a:	a5 e5       	ldi	r26, 0x55	; 85
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e5 e5       	ldi	r30, 0x55	; 85
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	8d 7f       	andi	r24, 0xFD	; 253
 846:	8c 93       	st	X, r24
			break;
		}

		SetBit(GICR , pin6);   //General Interrupt control Register
 848:	ab e5       	ldi	r26, 0x5B	; 91
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	eb e5       	ldi	r30, 0x5B	; 91
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	80 64       	ori	r24, 0x40	; 64
 854:	8c 93       	st	X, r24
 856:	a3 c0       	rjmp	.+326    	; 0x99e <__stack+0x13f>
	}

          /*EXT1*/
	else if(Copy_u8EXT_ID == EXT1)
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	09 f0       	breq	.+2      	; 0x860 <__stack+0x1>
 85e:	6c c0       	rjmp	.+216    	; 0x938 <__stack+0xd9>
	{
		DIO_voidSetPinDirection(portD , pin3 , pin_input);
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	63 e0       	ldi	r22, 0x03	; 3
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(portD , pin3 , pin_high);
 86a:	83 e0       	ldi	r24, 0x03	; 3
 86c:	63 e0       	ldi	r22, 0x03	; 3
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPinValue>

		/*PIF sense control*/
		switch(Copy_u8SenseMode)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	3e 83       	std	Y+6, r19	; 0x06
 87c:	2d 83       	std	Y+5, r18	; 0x05
 87e:	8d 81       	ldd	r24, Y+5	; 0x05
 880:	9e 81       	ldd	r25, Y+6	; 0x06
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	91 05       	cpc	r25, r1
 886:	21 f1       	breq	.+72     	; 0x8d0 <__stack+0x71>
 888:	2d 81       	ldd	r18, Y+5	; 0x05
 88a:	3e 81       	ldd	r19, Y+6	; 0x06
 88c:	22 30       	cpi	r18, 0x02	; 2
 88e:	31 05       	cpc	r19, r1
 890:	2c f4       	brge	.+10     	; 0x89c <__stack+0x3d>
 892:	8d 81       	ldd	r24, Y+5	; 0x05
 894:	9e 81       	ldd	r25, Y+6	; 0x06
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	61 f0       	breq	.+24     	; 0x8b2 <__stack+0x53>
 89a:	46 c0       	rjmp	.+140    	; 0x928 <__stack+0xc9>
 89c:	2d 81       	ldd	r18, Y+5	; 0x05
 89e:	3e 81       	ldd	r19, Y+6	; 0x06
 8a0:	22 30       	cpi	r18, 0x02	; 2
 8a2:	31 05       	cpc	r19, r1
 8a4:	21 f1       	breq	.+72     	; 0x8ee <__stack+0x8f>
 8a6:	8d 81       	ldd	r24, Y+5	; 0x05
 8a8:	9e 81       	ldd	r25, Y+6	; 0x06
 8aa:	83 30       	cpi	r24, 0x03	; 3
 8ac:	91 05       	cpc	r25, r1
 8ae:	71 f1       	breq	.+92     	; 0x90c <__stack+0xad>
 8b0:	3b c0       	rjmp	.+118    	; 0x928 <__stack+0xc9>
		{
		case LowLevel :
			ClrBit(MCUCR , pin2);
 8b2:	a5 e5       	ldi	r26, 0x55	; 85
 8b4:	b0 e0       	ldi	r27, 0x00	; 0
 8b6:	e5 e5       	ldi	r30, 0x55	; 85
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	8b 7f       	andi	r24, 0xFB	; 251
 8be:	8c 93       	st	X, r24
			ClrBit(MCUCR , pin3);
 8c0:	a5 e5       	ldi	r26, 0x55	; 85
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	e5 e5       	ldi	r30, 0x55	; 85
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	87 7f       	andi	r24, 0xF7	; 247
 8cc:	8c 93       	st	X, r24
 8ce:	2c c0       	rjmp	.+88     	; 0x928 <__stack+0xc9>
			break;

		case RisingEdge :
			SetBit(MCUCR , pin2);
 8d0:	a5 e5       	ldi	r26, 0x55	; 85
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e5 e5       	ldi	r30, 0x55	; 85
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	84 60       	ori	r24, 0x04	; 4
 8dc:	8c 93       	st	X, r24
			SetBit(MCUCR , pin3);
 8de:	a5 e5       	ldi	r26, 0x55	; 85
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e5 e5       	ldi	r30, 0x55	; 85
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	88 60       	ori	r24, 0x08	; 8
 8ea:	8c 93       	st	X, r24
 8ec:	1d c0       	rjmp	.+58     	; 0x928 <__stack+0xc9>
			break;

		case FallingEdge :
			ClrBit(MCUCR , pin2);
 8ee:	a5 e5       	ldi	r26, 0x55	; 85
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e5 e5       	ldi	r30, 0x55	; 85
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	8b 7f       	andi	r24, 0xFB	; 251
 8fa:	8c 93       	st	X, r24
			SetBit(MCUCR , pin3);
 8fc:	a5 e5       	ldi	r26, 0x55	; 85
 8fe:	b0 e0       	ldi	r27, 0x00	; 0
 900:	e5 e5       	ldi	r30, 0x55	; 85
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	88 60       	ori	r24, 0x08	; 8
 908:	8c 93       	st	X, r24
 90a:	0e c0       	rjmp	.+28     	; 0x928 <__stack+0xc9>
			break;

		case AnyLogicalChange :
			SetBit(MCUCR , pin2);
 90c:	a5 e5       	ldi	r26, 0x55	; 85
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e5 e5       	ldi	r30, 0x55	; 85
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	84 60       	ori	r24, 0x04	; 4
 918:	8c 93       	st	X, r24
			ClrBit(MCUCR , pin3);
 91a:	a5 e5       	ldi	r26, 0x55	; 85
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	e5 e5       	ldi	r30, 0x55	; 85
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	87 7f       	andi	r24, 0xF7	; 247
 926:	8c 93       	st	X, r24
			break;
		}

		SetBit(GICR , pin7);    //General Interrupt control Register
 928:	ab e5       	ldi	r26, 0x5B	; 91
 92a:	b0 e0       	ldi	r27, 0x00	; 0
 92c:	eb e5       	ldi	r30, 0x5B	; 91
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	80 68       	ori	r24, 0x80	; 128
 934:	8c 93       	st	X, r24
 936:	33 c0       	rjmp	.+102    	; 0x99e <__stack+0x13f>
	}

	         /*EXT2*/
	else if(Copy_u8EXT_ID == EXT2)
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	82 30       	cpi	r24, 0x02	; 2
 93c:	81 f5       	brne	.+96     	; 0x99e <__stack+0x13f>
	{
		DIO_voidSetPinDirection(portB , pin2 , pin_input);
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	62 e0       	ldi	r22, 0x02	; 2
 942:	40 e0       	ldi	r20, 0x00	; 0
 944:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(portB , pin2 , pin_high);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPinValue>

		/*PIF sense control*/
		switch(Copy_u8SenseMode)
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	28 2f       	mov	r18, r24
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	3c 83       	std	Y+4, r19	; 0x04
 95a:	2b 83       	std	Y+3, r18	; 0x03
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	9c 81       	ldd	r25, Y+4	; 0x04
 960:	81 30       	cpi	r24, 0x01	; 1
 962:	91 05       	cpc	r25, r1
 964:	31 f0       	breq	.+12     	; 0x972 <__stack+0x113>
 966:	2b 81       	ldd	r18, Y+3	; 0x03
 968:	3c 81       	ldd	r19, Y+4	; 0x04
 96a:	22 30       	cpi	r18, 0x02	; 2
 96c:	31 05       	cpc	r19, r1
 96e:	49 f0       	breq	.+18     	; 0x982 <__stack+0x123>
 970:	0f c0       	rjmp	.+30     	; 0x990 <__stack+0x131>
		{
		case RisingEdge :
			SetBit(MCUCR , pin6);
 972:	a5 e5       	ldi	r26, 0x55	; 85
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	e5 e5       	ldi	r30, 0x55	; 85
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	80 64       	ori	r24, 0x40	; 64
 97e:	8c 93       	st	X, r24
 980:	07 c0       	rjmp	.+14     	; 0x990 <__stack+0x131>
			break;

		case FallingEdge :
			ClrBit(MCUCR , pin6);
 982:	a5 e5       	ldi	r26, 0x55	; 85
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e5 e5       	ldi	r30, 0x55	; 85
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	8f 7b       	andi	r24, 0xBF	; 191
 98e:	8c 93       	st	X, r24
			break;
		}

		SetBit(GICR , pin5);     //General Interrupt control Register
 990:	ab e5       	ldi	r26, 0x5B	; 91
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	eb e5       	ldi	r30, 0x5B	; 91
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	80 62       	ori	r24, 0x20	; 32
 99c:	8c 93       	st	X, r24
	}

}
 99e:	28 96       	adiw	r28, 0x08	; 8
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	cf 91       	pop	r28
 9ac:	df 91       	pop	r29
 9ae:	08 95       	ret

000009b0 <__vector_1>:

void __vector_1()__attribute__((signal));
void __vector_1()
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePinValue(portA ,pin0);
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_voidTogglePinValue>
}
 9e2:	cf 91       	pop	r28
 9e4:	df 91       	pop	r29
 9e6:	ff 91       	pop	r31
 9e8:	ef 91       	pop	r30
 9ea:	bf 91       	pop	r27
 9ec:	af 91       	pop	r26
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	7f 91       	pop	r23
 9f4:	6f 91       	pop	r22
 9f6:	5f 91       	pop	r21
 9f8:	4f 91       	pop	r20
 9fa:	3f 91       	pop	r19
 9fc:	2f 91       	pop	r18
 9fe:	0f 90       	pop	r0
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	0f 90       	pop	r0
 a04:	1f 90       	pop	r1
 a06:	18 95       	reti

00000a08 <__vector_2>:

void __vector_2()__attribute__((signal));
void __vector_2()
{
 a08:	1f 92       	push	r1
 a0a:	0f 92       	push	r0
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	0f 92       	push	r0
 a10:	11 24       	eor	r1, r1
 a12:	2f 93       	push	r18
 a14:	3f 93       	push	r19
 a16:	4f 93       	push	r20
 a18:	5f 93       	push	r21
 a1a:	6f 93       	push	r22
 a1c:	7f 93       	push	r23
 a1e:	8f 93       	push	r24
 a20:	9f 93       	push	r25
 a22:	af 93       	push	r26
 a24:	bf 93       	push	r27
 a26:	ef 93       	push	r30
 a28:	ff 93       	push	r31
 a2a:	df 93       	push	r29
 a2c:	cf 93       	push	r28
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
	//DIO_voidSetPinValue(portA ,pin1 ,pin_high);
	DIO_voidTogglePinValue(portA ,pin1);
 a32:	80 e0       	ldi	r24, 0x00	; 0
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_voidTogglePinValue>
}
 a3a:	cf 91       	pop	r28
 a3c:	df 91       	pop	r29
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	0f 90       	pop	r0
 a5c:	1f 90       	pop	r1
 a5e:	18 95       	reti

00000a60 <__vector_3>:

void __vector_3()__attribute__((signal));
void __vector_3()
{
 a60:	1f 92       	push	r1
 a62:	0f 92       	push	r0
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	0f 92       	push	r0
 a68:	11 24       	eor	r1, r1
 a6a:	2f 93       	push	r18
 a6c:	3f 93       	push	r19
 a6e:	4f 93       	push	r20
 a70:	5f 93       	push	r21
 a72:	6f 93       	push	r22
 a74:	7f 93       	push	r23
 a76:	8f 93       	push	r24
 a78:	9f 93       	push	r25
 a7a:	af 93       	push	r26
 a7c:	bf 93       	push	r27
 a7e:	ef 93       	push	r30
 a80:	ff 93       	push	r31
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
	//DIO_voidSetPinValue(portA ,pin2 ,pin_high);
	DIO_voidTogglePinValue(portA ,pin2);
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	62 e0       	ldi	r22, 0x02	; 2
 a8e:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_voidTogglePinValue>
}
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	ff 91       	pop	r31
 a98:	ef 91       	pop	r30
 a9a:	bf 91       	pop	r27
 a9c:	af 91       	pop	r26
 a9e:	9f 91       	pop	r25
 aa0:	8f 91       	pop	r24
 aa2:	7f 91       	pop	r23
 aa4:	6f 91       	pop	r22
 aa6:	5f 91       	pop	r21
 aa8:	4f 91       	pop	r20
 aaa:	3f 91       	pop	r19
 aac:	2f 91       	pop	r18
 aae:	0f 90       	pop	r0
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	0f 90       	pop	r0
 ab4:	1f 90       	pop	r1
 ab6:	18 95       	reti

00000ab8 <EXT_voidGIE_Enable>:
#include "DIO_Interface.h"
#include "GIE_Private.h"
#include "GIE_Interface.h"

void EXT_voidGIE_Enable(void)
{
 ab8:	df 93       	push	r29
 aba:	cf 93       	push	r28
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG , pin7);
 ac0:	af e5       	ldi	r26, 0x5F	; 95
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	ef e5       	ldi	r30, 0x5F	; 95
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	80 68       	ori	r24, 0x80	; 128
 acc:	8c 93       	st	X, r24
}
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <EXT_voidGIE_Disable>:

void EXT_voidGIE_Disable(void)
{
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
	ClrBit(SREG , pin7);
 adc:	af e5       	ldi	r26, 0x5F	; 95
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	ef e5       	ldi	r30, 0x5F	; 95
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	8f 77       	andi	r24, 0x7F	; 127
 ae8:	8c 93       	st	X, r24
}
 aea:	cf 91       	pop	r28
 aec:	df 91       	pop	r29
 aee:	08 95       	ret

00000af0 <main>:
#include "GIE_Interface.h"
#include "EXT_Config.h"
#include "EXT_Interface.h"

int main()
{
 af0:	df 93       	push	r29
 af2:	cf 93       	push	r28
 af4:	cd b7       	in	r28, 0x3d	; 61
 af6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(portA ,pin0 ,pin_output);
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	60 e0       	ldi	r22, 0x00	; 0
 afc:	41 e0       	ldi	r20, 0x01	; 1
 afe:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(portA ,pin1 ,pin_output);
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	61 e0       	ldi	r22, 0x01	; 1
 b06:	41 e0       	ldi	r20, 0x01	; 1
 b08:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(portA ,pin2 ,pin_output);
 b0c:	80 e0       	ldi	r24, 0x00	; 0
 b0e:	62 e0       	ldi	r22, 0x02	; 2
 b10:	41 e0       	ldi	r20, 0x01	; 1
 b12:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>

	EXT_voidInitialize(EXT0 ,RisingEdge);
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	61 e0       	ldi	r22, 0x01	; 1
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	0e 94 ae 03 	call	0x75c	; 0x75c <EXT_voidInitialize>
	EXT_voidInitialize(EXT1 ,LowLevel);
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	0e 94 ae 03 	call	0x75c	; 0x75c <EXT_voidInitialize>
	EXT_voidInitialize(EXT2 ,FallingEdge);
 b2e:	82 e0       	ldi	r24, 0x02	; 2
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	62 e0       	ldi	r22, 0x02	; 2
 b34:	70 e0       	ldi	r23, 0x00	; 0
 b36:	0e 94 ae 03 	call	0x75c	; 0x75c <EXT_voidInitialize>
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <main+0x4a>

00000b3c <_exit>:
 b3c:	f8 94       	cli

00000b3e <__stop_program>:
 b3e:	ff cf       	rjmp	.-2      	; 0xb3e <__stop_program>
